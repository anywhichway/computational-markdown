---
title: Computational Markdown
licensor: AnyWhichWay
license: Creative Commons
version: 0.0.1b
target: _tab
---

# Computation Markdown Introduction

This site serves as an informal specification for Computational Markdown.

The use of Edge or Chrome is recommended. Firefox and Safari do not support direct file saving. When you use them
you will need to use the browser native mechanisms to save a page's source after you use File/Export. Also, with
Firefox, you will encounter this error: ==Error: Dynamic module import is disabled or not supported in this context==
when you use some macros.

# Table Of Contents


# Markdown Extras {#extras}

Some Markdown can be immediately followed by data inside `{}`.

- `#<id>` sets an `id` on the HTML element generated by the Markdown. This is useful for links and Computational
Markdown named values, a.k.a. variables.
- `.<css class name>` adds the `css class name` to the list of classes for the HTML element. Multiple classes are allowed.
- `<attribute name>`="", sets the `attribute name` on the generated HTML to the `value` inside the quotes.
Attribute names are restricted to those listed in the Markdown translation tables in this document. **Note**: all 
attributes starting with "on" will always be ignored for security reasons and `style` is only supported on some elements.
- `checked`, for Markdown that translates to HTML elements that support the unary `checked` attribute.
- `hidden`, to hide the generated HTML element (useful for data or comments)

# Basic Markdown

Computational Markdown assumes all Basic Markdown.

# Extended Markdown

Computational Markdown assumes most Extended Markdown and adds two markup elements. See
https://www.markdownguide.org/cheat-sheet/.

| Markdown                                                     | Display                                                   | Extras            | Attribute Extras   | Computational |
|--------------------------------------------------------------|-----------------------------------------------------------|-------------------|--------------------|---------------|
| `[true]{} [false]{}`                                         | [true]{} [false]{}                                        | ✓(required)       |                    | ✓             |
| `(traditional){#gender checked}` `(non-traditional){#gender}` | (traditional){#gender checked} (non-traditional){#gender} | ✓(required) | checked                 | ✓             |



# Frontmatter

NerdEditor supports frontmatter in `YAML` format.

A title value is converted to a `<title>` element in the output HTML.

A target value is set as the target window or tab for links using the `<base>` element.

All other values are converted to `<meta>` elements.

```yaml
---
title: Computational Markdown
licensor: AnyWhichWay
license: Creative Commons
version: 0.0.1b
---
```

results in:

```html
<title>Computational Markdown</title>
<meta name="licensor" content="AnyWhichWay">
<meta name="license" content="Creative Commons">
```

# Computational Markdown

Computational Markdown adds support for form layout, macros (including and list layout and advanced math), reactive
computation, data import, language processing, e.g. Latex, and document data (tailmatter).

## Form Layout

Single lines starting with text, followed by a colon, then spaces and either a `var`, `input`, or
`textarea` and terminated with a `\` will put sequential lines into a form layout that respects spaces
so that fields can be aligned.

```markdown
Cash:        <var>:value[50]{#pettycash}</var>\
Checking:    <var>:value[!!(./demo-data/checking.json)]{#checking}</var>\
Expense:     <input id="expense" value="0">\
Total:       <var>:value[]{#total :="${$[#pettycash] + $[#checking] - $[#expense]}"}</var>\
```

## Macros

See [Form Layout](#form-layout) above for the definition of this form.

Cash:        <var>:value[50]{#pettycash}</var>\
Checking:    <var>:value[!!(./demo-data/checking.json)]{#checking}</var>\
Expense:     <input id="expense" value="0">\
Total:       <var>:value[]{#total :="${$[#pettycash] + $[#checking] - $[#expense]}"}</var>\

Input fields can also be used for training: [^0]. Here, we insert an unnamed value, i.e. just text after an input
field. Every time the input changes, the adjacent text will get updated.

```markdown
<input id="q1" default="NaN" placeholder="What is the answer?"> :value[]{:="${$[#q1]===4 ? 'Correct!' : isNaN($[#q1]) ? '' : 'Incorrect!'}"}`
```

What is 2 + 2: <input id="q1" default="NaN" placeholder="What is the answer?"> :value[]{:="${$[#q1]===4 ? 'Correct!' : isNaN($[#q1]) ? '' : 'Incorrect!'}"}

[^0]: Note, the correct values can still be viewed in the source of the resulting HTML. You will
need to use a specialized education browser to stop this, or implement server code that is called by something like this
`${await isCorrect("#q1",$[#q1]) ? 'Correct!' : isNaN($[#q1]) ? '' : 'Incorrect!'}`.

Note, Computational Markdown supports a non-standard HTML attribute, `default` on tags that are referenced by
macros. This is converted to `data-default` during transpilation to HTML. It helps ensure macros do not throw errors
due to the presence of undefined values.

Based on the above, you can see that directives of the form `:value[<some value>]{#<some id>}` are used
to insert variables into documents.

|Markdown                  |Display       |Extras      |Attribute Extras  |Computational |
|--------------------------|--------------|------------|------------------|--------------|
| `:value[extra]{#<id>}`   | extra        | ✓    | `:`              | ✓      |


Directive
: A token preceded by `:` or `::`. The optional data inside the `[]` of a directive is used as the inner content of generated HTML. The directive can be named and styling can be applied by using extras `{}` notation. If the token is preceded by `:` it is displayed inline. If it is preceded by `::` it is displayed in its own paragraph.

Macro
: A value directive with an attribute ":" containing a string template, e.g.. `:value[]{:="The square root of 24 is ${Math.sqrt(24)}"}`
: A Markdown link prefixed by '!'. See [Inline Data](#inline-data) below.
: Fenced code followed by `()`.  See [Math]($math) and [Fenced Code Blocks](#fenced-code-blocks) below.


[String templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) are the
standard way of creating dynamic strings in JavaScript.

String templates always return strings, but Computational Markdown coerces the strings into HTML[^0], numbers, booleans,
objects, and arrays as necessary.

[^0]: Strings converted into HTML are sanitizied to help avoid cross site script (^XSS) attacks.

### Comments and Hidden Data

You can also use the `:value` directive to insert hidden data or comments.

```
:value[This is a comment]{hidden}
```
:value[This is a comment]{hidden}

You will have to inspect the source to see the impact of the above.

### Named Value References

In the code for the `Total` field above, `:value[]{#total :="${$[#pettycash] + $[#checking] - $[#expense]}"}`, you can
see it uses a string template containing [CSS selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)
 wrapped in `[]`s prefixed by an `!`, e.g. `$[<selector>]`.[^0]. This is read as "the parsed value of the `textContent`
 of the element(s) returned by selector `<selector>`".

[^0]: The `$[\<selector\>]` was chosen over `=[\<selector\>]` because `$[\<value\>]` is not likely to mean anything
JavaScript that may be present in string templates and is similar to the `$(selector)` syntax used by JQuery.

By convention, named values, a.k.a. variables, are typically created using `:value`. However, they can actually be
any HTML element or elements selectable using CSS.

Ids, selectors starting with `#`, are typically used, but any selector is allowed so long as it is expressed on one line
inside `[]`.

The value of an element is its text content coerced into a JavaScript value. An array of values can be retrieved by
ending the selector in `[]`.[^0]

[^0]: In JavaScript this is the difference between using `querySelector` and `querySelectorAll`.

### Math

#### Basic

Basic math expressions can be evaluated or solved using the JavaScript math object.

- π * 3^2 = `${Math.PI * Math.pow(3,2)}`()
- π * r^2 when r = 3 is `` `${Math.PI * solve('Math.pow(r,2)',{r:3})}`() `` = `${Math.PI * solve('Math.pow(r,2)',{r:3})}`()
- π * r^2 when r = 3 is `` `${Math.PI * Math.pow(r,2)}`({r:3}) `` = `${Math.PI * Math.pow(r,2)}`({r:3})

#### Advanced

The macro evaluator is pre-loaded with [MathJS](https://mathjs.org/){target="_tab"} so you can use its power in your
document.

Forgot the rules for simplifying algebraic expressions or need a derivative? No problem!

- simplify('x\*y-y\*x') =  :value[]{:="${simplify('x*y-y*x')}"}
- derivative('x^2 + x', 'x') =  `${derivative('x^2 + x', 'x')}`()

`` `${derivative('x^2 + x', 'x')}`() `` is shorthand for `:value[]{:="derivative('x^2 + x', 'x')"}`, which is
useful when you do not need to create a named value from a macro.

Note, prefixing MathJS functions with `math.` is not necessary.

As with basic math, you can solve expressions by providing arguments, e.g.

- solve(derivative('x^2 + x', 'x'),{x:2}) =  :value[]{:="${solve(derivative('x^2 + x', 'x'),{x:2})}"}

Note, in the above example `{x:2}` is not passed in because we are trying to solve the derivative. Passing `{x:2}` at
the top level would result in an error: `${solve(derivative('x^2 + x', 'x'))}`({x:2}).


#### Spreadsheets

If you provide an id for a table and give it the class `ne-spreadsheet` using extras `{}` notation, the first row
and column are used for generating ids that can be used in macros. Using extras notation, classes can be applied to columns.
(You will need to include your own `style` block.)

```markdown
<style>
    .currency-usd::before { content: "$"}
</style>
|            | Amounts{.currency-usd}     |
| ---------- | ----------- |
| Petty Cash | 10          |
| Checking   | 20          |
| Total      | `${$[#mytable_Amounts_Petty_Cash]+$[#mytable_Amounts_Checking]}`() |
{#mytable .ne-spreadsheet}
```

|        | Amounts{.currency-usd}                                             |
| ------ |--------------------------------------------------------------------|
| Petty Cash | 10                                                                 |
| Checking | 20                                                                 |
| Total  | `${$[#mytable_Amounts_Petty_Cash]+$[#mytable_Amounts_Checking]}`() |
{#mytable .ne-spreadsheet}

### Inline Data

Inline data by prefixing links with a `!` or `!!`. A single `!` will inline the data when readers access the document.
The data will be dynamic. A double `!!` will inline the data when the document is transpiled to HTML. The data will be
static (unless the document is being transpiled on the fly).

*Earthquakes In Past Hour*

```markdown
<var id="quakes">
    !(https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson)
</var>
```

<var id="quakes">
    !(https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson)
</var>

### Macro Utility Functions

There are some macro utility functions in addition to [math](#math).

- `ul` takes a JSON array and returns the HTML for an unordered list using a callback function to provide the content of
the list items, e.g. `` !`${ul($[#astros].people,({name,craft}) => name + ' flying in ' + craft)}` ``.
- `ol` does the same as `ul`, but returns the HTML for an ordered list
-  `map`, `reduce`, `filter` and other JavaScript built-ins can also be used. They should return a string, which will
be sanitized if HTML.

*Earthquake Summary*

```markdown
`${ul($[#quakes].features,({properties}) => properties.mag + '  ' + properties.place)}`()
```

`${ul($[#quakes].features,({properties}) => properties.mag + '  ' + properties.place)}`()

### Computational Fenced Code

Fenced code can be "executed" based on its language declaration by adding `()` after the fence.

For blocks (not inlines), it is recommended you put the `()` marking the block as computational on the line immediately 
after the fence to improve code formatting in the editor itself. However, it will also work on the fence line.

Showing the source of fenced code can be toggled with a `+` sign before the `()`.


#### LaTeX {#latex}

| Markdown                                              | Display                                        |
|-------------------------------------------------------|------------------------------------------------|
| `` !`latex Lift = \frac{1}{2} \rho v^2 S C_L`() ``    | `latex Lift = \frac{1}{2} \rho v^2 S C_L`()    |
| `` !`latex [\ce{H2O(l)}] = \pu{75.3 J // mol K}`() `` | `latex [\ce{H2O(l)}] = \pu{75.3 J // mol K}`() |

You can use fenced blocks in addition to inlines, e.g.

```markdown
‷latex
Lift = \frac{1}{2} \rho v^2 S C_L\
‷()
```

```latex
Lift = \frac{1}{2} \rho v^2 S C_L\
```
()

You can also use `$` to bracket LaTeX expressions inline, `$Lift = \frac{1}{2} \rho v^2 S C_L$` =
$Lift = \frac{1}{2} \rho v^2 S C_L$.

And `$$` to create a block, `$$Lift = \frac{1}{2} \rho v^2 S C_L$$`.

$$Lift = \frac{1}{2} \rho v^2 S C_L$$.

Wikipedia provides a great list of Latex tags for [math](https://en.wikipedia.org/wiki/List_of_mathematical_symbols_by_subject){target="_tab"}
and [chemistry](https://en.wikibooks.org/wiki/LaTeX/Chemical_Graphics){target="_tab"}.

#### Music

Compose and make playable some music using [ABC Notation](https://abcnotation.com/){target="_tab"}.

```markdown
‷abc
X: 1
T: Nokia Tune
M: 3/4
L: 1/8
K: Amaj
|: e'd' f2 g2 | c'b d2 e2 | ba c2 e2 | a6 |
‷()
```

```abc
X: 1
T: Nokia Tune
M: 3/4
L: 1/8
K: Amaj
|: e'd' f2 g2 | c'b d2 e2 | ba c2 e2 | a6 |
```
()

If you remove the `:` in second position of the last line, the <button>Play</button> button will disappear

```markdown
‷abc
X:1
T: Paper
K:D
| DDAA | BBA2|
‷()
```

```abc
X:1
T: Paper
K:D
| DDAA | BBA2|
```
()

#### Charts

You can build charts using the [Plotly Charting Library](https://plotly.com/graphing-libraries/){target="_tab"} with imported data. [^0]

```markdown
:value[!! (./demo-data/chart.json5)]{#chart hidden}

‷plotly
    $[#chart]
‷()
```

:value[!!(./demo-data/chart.json5)]{#chart hidden}

```plotly
$[#chart]
```
()

Note, currently Ploty data ***MUST*** be resolved when the Markdown is transpiled. Your links must be prefixed with `!!`.

[^0]: JSON data can be imported using standard JSON or a relaxed format called [JSON5](https://json5.org/){target="_tab"}.

Of, course you could also put most of the Ploty definition directly in your Markdown file and just load the line data.

```markdown
:value[!! (./demo-data/chart-data.json5)]{#chartdata hidden}

‷plotly
{
  data: [ {
    x:${JSON.stringify($[#chartdata].x)},
    y:${JSON.stringify($[#chartdata].y)},
    mode: 'markers',
    marker: {
      size: [20, 40, 25, 10, 60, 90, 30]
    }
  }],
  layout: {
    title: 'My Chart'
  }
}
‷()
```

:value[!!(./demo-data/chart-data.json5)]{#chartdata hidden}

```plotly
 {
  data: [ {
    x:${JSON.stringify($[#chartdata].x)},
    y:${JSON.stringify($[#chartdata].y)},
    mode: 'markers',
    marker: {
      size: [20, 40, 25, 10, 60, 90, 30]
    }
  }],
  layout: {
    title: 'My Chart'
  }
}
```
()

### REPLS, a.k.a. Cells {#repls}

REPLs, a.k.a. Cells, can be used to document source or provide training material by pre-populating some sections.

To show a section use its name as a unary attribute for the `ne-cell` tag.

To set `linenumbers` or `readonly` to default on, use them as unary attributes in the `ne-cell` tag.

You can also turn on and off `readonly` and `linenumbers` in the slots used to provide default values.

```html
<ne-cell css body script linenumbers replstyle="border:solid black 1px;height:10em">
    <slot name="css">h1 { font-size:small}</slot>
    <slot name="body"  readonly linenumbers="false" style="resize:both"><h1>Test</h1></slot>
     <slot name="script">(function() { console.log(); })()</slot>
</ne-cell>
```

<ne-cell css body script linenumbers replstyle="border:solid black 1px;height:10em">
    <slot name="css">h1 { font-size:small}</slot>
    <slot name="body"  readonly linenumbers="false" style="resize:both"><h1>Test</h1></slot>
     <slot name="script">(function() { console.log(); })()</slot>
</ne-cell>

This cell is based on [repl-host](https://medium.com/@anywhichway/how-to-host-a-repl-342bc0e15f5d){target="_tab"}.

### Document Data (Tailmatter) {#tailmatter}

The last section of a Computational Markdown document can be delimited by `---` and contains a
[JSON5](https://www.json5.org){target="_tab"} object. The final `---` must NOT be followed by a new line or any other
characters.

The object is available to macros as `document.data`.

If frontmatter is provided in the document, then the property 'page' is added with all the frontmatter variables.

The data also stores data URLs for images and other content in a sub-object called `urls` that has the ids of the 
content as keys and the data URLs as values.

The object `document.data` is a special object that is exported to the WebWorker that evaluates templates, although
the `urls` property is deleted because it tends to be large.

# Error Handling {#errors}
Loops in macros are trapped.

```html
Loop: <var id="loop">!`${$[#total] + $[#pettycash]}`</var>
Vicious Loop: <var id="vloop">!`${$[#total] + $[#vloop]}`</var>
```

Loop: <var id="loop">`${$[#total] + $[#pettycash]}`()</var>
Vicious Loop: <var id="vloop">`${$[#total] + $[#vloop]}`()</var>

Errors or issues that are known to not impact the document or are a result of author mistakes are logged to the
browser debug console.


# Security

NerdEditor is the first tool to implement Computational Markdown is currently in BETA.

Macros and fenced code should be run in WebWorkers and sanitize any HTML returned.

REPLs should run in their own iframes.

Currently any HTML included directly in Markdown should have `script` tags and attributes starting with "on" removed.
Style blocks should also be sanitized.

# License

The spec for Computational Markdown is released under Creative Commons. Anyone is free to implement.

# Repository

https://github.com/anywhichway/computational-markdown

---
{
    "urls": { }
}
---